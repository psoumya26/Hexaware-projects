1) Create URL Mapping for the respective project defined
I. Min 5 URL (decide the URLs based on your project statements
II. Keep admin URL separately
III. Use templates for the URL connections
IV. Define static folder and add CSS files.
V. Use Bootstrap modules
VI. Change the admin interface as per your project statements.
2) Create a ModelForm for AUTHOR{name, book and bookid}
Add the table &lt;appname&gt;_author into the database.
3) Render HTML Forms (GET &amp; POST) in Django for the fields fist name and last name
4) Use Django built-in methods to validate form login page data automatically. Use CSRF tokens.

answers 

I. URL Mapping 
1. Home Page: /
2. Authors: /authors/
3. Author Details: /authors/<author_id>
4. Admin Login Page: /admin/login
5. Admin Page: /admin/ 

II. Admin URL Mapping 
1. Admin Home Page: /admin/ 
2. Admin Author List: /admin/author/list 
3. Admin Author Create: /admin/author/create 
4. Admin Author Update: /admin/author/update/<author_id> 
5. Admin Author Delete: /admin/author/delete/<author_id>

III. Templates 
1. Home Page: templates/index.html
2. Author List: templates/authors.html 
3. Author Details: templates/author_detail.html 
4. Admin Login Page: templates/admin/login.html 
5. Admin Home Page: templates/admin/index.html 
6. Admin Author List: templates/admin/author_list.html 
7. Admin Author Create: templates/admin/author_create.html 
8. Admin Author Update: templates/admin/author_update.html 
9. Admin Author Delete: templates/admin/author_delete.html

IV. Static Folder 
Add the below files to the static folder
1. CSS File: static/css/main.css 
2. Bootstrap File: static/bootstrap/bootstrap.min.css 
3. JS File: static/js/main.js

V. Use Bootstrap Modules 
1. Use the Bootstrap Grid System, Forms, Buttons, and Navbars.
2. Use the Bootstrap components like Alerts, Modals, and Dropdowns.

VI. Change Admin Interface 
1. Add an Admin Panel page to manage Authors.
2. Create a separate page to add, update and delete Authors.
3. Add additional functionality such as sorting, filtering and pagination.



2) Create a ModelForm for AUTHOR{name, book and bookid}
Add the table <appname>_author into the database.

class AuthorForm(ModelForm):
    class Meta:
        model = Author
        fields = ['name', 'book', 'bookid']




3) Render HTML Forms (GET & POST) in Django for the fields fist name and last name

&lt;form action="" method="post"&gt;
    {% csrf_token %}
    &lt;div class="form-group"&gt;
        &lt;label for="firstName"&gt;First Name:&lt;/label&gt;
        &lt;input type="text" class="form-control" name="firstName" id="firstName"&gt;
    &lt;/div&gt;
    &lt;div class="form-group"&gt;
        &lt;label for="lastName"&gt;Last Name:&lt;/label&gt;
        &lt;input type="text" class="form-control" name="lastName" id="lastName"&gt;
    &lt;/div&gt;
    &lt;button type="submit" class="btn btn-primary"&gt;Submit&lt;/button&gt;
&lt;/form&gt;



4) Use Django built-in methods to validate form login page data automatically. Use CSRF tokens.

&lt;form action="" method="post"&gt;
    {% csrf_token %}
    &lt;div class="form-group"&gt;
        &lt;label for="firstName"&gt;First Name:&lt;/label&gt;
        &lt;input type="text" class="form-control" name="firstName" id="firstName"&gt;
        {% if form.errors.firstName %}
            &lt;div class="alert alert-danger"&gt;
                {{ form.errors.firstName }}
            &lt;/div&gt;
        {% endif %}
    &lt;/div&gt;
    &lt;div class="form-group"&gt;
        &lt;label for="lastName"&gt;Last Name:&lt;/label&gt;
        &lt;input type="text" class="form-control" name="lastName" id="lastName"&gt;
        {% if form.errors.lastName %}
            &lt;div class="alert alert-danger"&gt;
                {{ form.errors.lastName }}
            &lt;/div&gt;
        {% endif %}
    &lt;/div&gt;
    &lt;button type="submit" class="btn btn-primary"&gt;Submit&lt;/button&gt;
&lt;/form&gt;



			Model form

1) Create a model form and write the CRUD queries in the dijango shell
class sampleModel(models.Model):
        # fields of the model
    title = models.CharField(max_length = 200)
    description = models.TextField()
    last_modified = models.DateTimeField(auto_now_add = True)
    
2) Write a program to upload the txt file and check in the admin view.
3) Create an Employee model(Ename, EID) and write the into csv file using
Dynamic CSV and database
4) Get a string message &quot;Hello How are you &quot; from the user from and print into the pdf
file.

Answers

1)

# Create a form for the model

from django import forms

class SampleModelForm(forms.ModelForm):
    class Meta:
        model = SampleModel
        fields = '__all__'

# CRUD Queries

# Create

# Create a new object
new_object = SampleModel.objects.create(title='My object', description='My description')

# Read

# Get all objects
all_objects = SampleModel.objects.all()

# Get an object by id
object_by_id = SampleModel.objects.get(id=1)

# Get objects by filter
filtered_objects = SampleModel.objects.filter(title='My object')

# Update

# Update an object
updated_object = SampleModel.objects.get(id=1)
updated_object.title = 'New title'
updated_object.save()

# Delete

# Delete an object
deleted_object = SampleModel.objects.get(id=1)
deleted_object.delete()

2)
from django.shortcuts import render
from django.http import HttpResponse
from django.views.decorators.csrf import csrf_exempt
from django.conf import settings

import os

@csrf_exempt
def upload_file(request):
    if request.method == 'POST':
        file = request.FILES['file']
        filename = file.name
        path = os.path.join(settings.MEDIA_ROOT, filename)
        file_url = os.path.join(settings.MEDIA_URL, filename)
        with open(path, 'wb+') as f:
            for chunk in file.chunks():
                f.write(chunk)
        return HttpResponse(file_url)

# urls.py
from django.urls import path
from . import views

urlpatterns = [
    path('admin/upload/', views.upload_file, name='upload_file'),
]

3)


#models.py
from django.db import models

class Employee(models.Model):
    ename = models.CharField(max_length=100)
    eid = models.IntegerField()

#views.py
import csv
from django.http import HttpResponse

def export_employee_csv(request):
    response = HttpResponse(content_type='text/csv')
    response['Content-Disposition'] = 'attachment; filename="Employee.csv"'

    writer = csv.writer(response)
    writer.writerow(['Ename', 'EID'])

    employees = Employee.objects.all().values_list('ename', 'eid')
    for employee in employees:
        writer.writerow(employee)

    return response

4)

response = input("Please enter a string message: ")

# Create a PDF file
from reportlab.pdfgen import canvas

# Create a file name
pdf_file_name = 'message.pdf'

# Create a canvas object
c = canvas.Canvas(pdf_file_name)

# Add text to the PDF
c.drawString(50, 750, response)

# Save the PDF
c.save()
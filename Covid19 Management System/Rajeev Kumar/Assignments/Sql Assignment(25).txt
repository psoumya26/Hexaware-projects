          ################################ SQL ASSIGNMENTS #############################
32: High-value customers:

Select Customers.Customerid,Customers.Companyname,Orders.Orderid,
Totalorderamount = Sum(Quantity * Unitprice)
From Customers
Join Orders On Orders.Customerid = Customers.Customerid
Join Orderdetails On Orders.Orderid = Orderdetails.Orderid Where
Year(Orders.Orderdate) = 2016
Group By Customers.Customerid, Customers.Companyname, Orders.Orderid
Having Sum(Quantity * Unitprice) > 10000
Order By Totalorderamount Desc;



33: High-value customers-total orders :

Select Customers.CustomerID, Customers.CompanyName,
TotalOrderAmount = SUM(Quantity * UnitPrice)
From Customers
join Orders on Orders.CustomerID = Customers.CustomerID
join OrderDetails on Orders.OrderID = OrderDetails.OrderID
Where YEAR(Orders.OrderDate) = 2016
group by Customers.CustomerID, Customers.CompanyName
having SUM(Quantity * UnitPrice) > 15000
order by TotalOrderAmount desc;


34: High-value customers _ with discount:

Select Customers.Customerid, Customers.Companyname,
Totalwithoutdiscount = Sum(Quantity * Unitprice),
Totalwithdiscount = Sum(Quantity * Unitprice * (1-Discount))
From Customers
Join Orders On Orders.Customerid = Customers.Customerid
Join Orderdetails On Orders.Orderid = Orderdetails.Orderid
Where Year(Orders.Orderdate) = 2016
Group By Customers.Customerid, Customers.Companyname
Having Sum(Quantity * Unitprice * (1-Discount)) > 10000
Order By Totalwithdiscount Desc;


35: Month-end orders:

Select Employeeid, Orderid, Orderdate
From Orders
Where Eomonth(Orderdate) = Convert(Date, Orderdate)
Order By Employeeid, Orderid;


36: Orders with many line items:

Select Top 10 Orderid, Totalorderdetails
From (Select Distinct Orderid,
Count(Orderid) Over(Partition By Orderid) As Totalorderdetails
From Orderdetails) As T
Order By Totalorderdetails Desc;


37: Orders - random assortmen:

Select  Top 2 Percent Orderid
From Orders
Order By Newid();


38: Orders- accidental double-entry:

select distinct OrderID
from (select OrderID,
count(ProductID) over(partition by orderid, quantity) as nl
from OrderDetails
where Quantity >= 60) As T
where nl > 1
order by OrderID;


39: Orders-accidental double-entry details

With DE_Orders(OrderID) As
(select distinct OrderID
from (select OrderID,
count(ProductID) over(partition by orderid, quantity) as nl
from OrderDetails
where Quantity >= 60) As T
where nl > 1)
select OrderID, ProductID, UnitPrice, QUantity, Discount
from OrderDetails
where OrderID in (select OrderID from DE_Orders);

41: Late orders:

select OrderID, OrderDate, RequiredDate, ShippedDate
from Orders
where ShippedDate >= RequiredDate;


42: Late orders-which employees?:

select Orders.EmployeeID, Employees.LastName,
count(OrderID) As TotalLateOrders
from Orders
join Employees on Orders.EmployeeID = Employees.EmployeeID
where ShippedDate >= RequiredDate
group by Orders.EmployeeID,  Employees.LastName
order by TotalLateOrders desc;


43: Late orders vs. total orders:

select  EmployeeID, LastName, TotalOrders, TotalLateOrders
from (select distinct O.EmployeeID, E.LastName,
sum(case when ShippedDate >= RequiredDate then 1 else 0 end)
over (partition by O.EmployeeID) As TotalLateOrders,
count(O.OrderID) over (partition by O.EmployeeID) As TotalOrders
from Orders AS O
join Employees AS E
on O.EmployeeID = E.EmployeeID) AS T
where TotalLateOrders > 0;

46: Late orders vs. total orders - percentage :

select  EmployeeID, LastName, TotalOrders, TotalLateOrders,
(TotalLateOrders*100.0/TotalOrders) AS PercentLateOrders
from (select distinct O.EmployeeID, E.LastName,
sum(case when ShippedDate >= RequiredDate then 1 else 0 end)
over (partition by O.EmployeeID) As TotalLateOrders,
count(O.OrderID) over (partition by O.EmployeeID) As TotalOrders
from Orders AS O
join Employees AS E
on O.EmployeeID = E.EmployeeID) AS T
where TotalLateOrders > 0;

47: Late orders vs. total orders - fix decimal:

select  EmployeeID, LastName, TotalOrders, TotalLateOrders,
CONVERT(decimal(10,2),(TotalLateOrders*100.0/TotalOrders))
AS PercentLateOrders
from (select distinct O.EmployeeID, E.LastName,
sum(case when ShippedDate >= RequiredDate then 1 else 0 end)
over (partition by O.EmployeeID) As TotalLateOrders,
count(O.OrderID) over (partition by O.EmployeeID) As TotalOrders
from Orders AS O
join Employees AS E
on O.EmployeeID = E.EmployeeID) AS T
where TotalLateOrders > 0;

48: Customer grouping:

With CustomerTotalOrder_2016(CustomerID, CompanyName, TotalOrderAmount) AS
(Select Customers.CustomerID, Customers.CompanyName,
TotalOrderAmount = SUM(Quantity * UnitPrice)
From Customers
join Orders on Orders.CustomerID = Customers.CustomerID
join OrderDetails
on Orders.OrderID = OrderDetails.OrderID
Where YEAR(Orders.OrderDate) = 2016
group by Customers.CustomerID, Customers.CompanyName)
select CustomerID, CompanyName, TotalOrderAmount,case
when 0 <= TotalOrderAmount AND TotalOrderAmount <= 1000 Then 'Low'
when 1000 < TotalOrderAmount AND TotalOrderAmount <= 5000 Then 'Medium'
when 5000 < TotalOrderAmount AND TotalOrderAmount <= 10000 Then 'High'
when TotalOrderAmount > 10000  Then 'Very High'
end as CustomerGroup
from CustomerTotalOrder_2016
order by CustomerID;

50: Customer grouping with percentage:

With CustomerTotalOrder_2016(CustomerID, CompanyName, TotalOrderAmount) AS
(Select Customers.CustomerID, Customers.CompanyName,
TotalOrderAmount = SUM(Quantity * UnitPrice)
From Customers
join Orders on Orders.CustomerID = Customers.CustomerID
join OrderDetails
on Orders.OrderID = OrderDetails.OrderID
Where YEAR(Orders.OrderDate) = 2016
group by Customers.CustomerID, Customers.CompanyName)
select distinct CustomerGroup,
count(CustomerGroup) over(partition by CustomerGroup) as TotalInGroup,
(count(CustomerGroup) over(partition by CustomerGroup))*100.0/(select count(*)
from CustomerTotalOrder_2016) as PercentageInGroup
from
(select
case
when 0 <= TotalOrderAmount AND TotalOrderAmount <= 1000 Then 'Low'
when 1000 < TotalOrderAmount AND TotalOrderAmount <= 5000 Then 'Medium'
when 5000 < TotalOrderAmount AND TotalOrderAmount <= 10000 Then 'High'
when TotalOrderAmount > 10000  Then 'Very High'
end as CustomerGroup
from CustomerTotalOrder_2016) AS T
order by TotalInGroup desc;


51: Customer grouping-flexible:

With CustomerTotalOrder_2016(CustomerID, CompanyName, TotalOrderAmount) AS
(Select Customers.CustomerID, Customers.CompanyName,
TotalOrderAmount = SUM(Quantity * UnitPrice)
From Customers
join Orders on Orders.CustomerID = Customers.CustomerID
join OrderDetails on Orders.OrderID = OrderDetails.OrderID
Where YEAR(Orders.OrderDate) = 2016
group by Customers.CustomerID, Customers.CompanyName)
select CustomerID, CompanyName, TotalOrderAmount, CustomerGroupName
from CustomerTotalOrder_2016
join CustomerGroupThresholds
on (RangeBottom < TotalOrderAmount)
and (RangeTop > TotalOrderAmount)
order by CustomerID;



                  #################  CASE STUDIES - SQL ASSIGNMENTS #################
Case Study 1.Find the difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table.

Sol.:-
create database station;
use station;
create table STATION(
ID int NOT NULL,
CITY varchar(20),
STATE varchar(20),
LAT_N int NOT NULL,
LONG_W int NOT NULL
);
INSERT INTO STATION
VALUES(1,'New York','USA',123,432);
INSERT INTO STATION
VALUES(2,'New York','USA',123,432);
INSERT INTO STATION
VALUES(3,'Bangalaru','Karnataka',435,5677);
SELECT * FROM STATION;

Query - select count(CITY)-count(distinct CITY) from STATION;


Case Study 2.
sol: create database NHL;
use NHL;
CREATE TABLE team(
t_name varchar(20),
city varchar(20),
coach varchar(20),
captain varchar(20)
);
drop table team;
select * from team;
alter table team
add g_score int NOT NULL;
alter table team
add p_name varchar(20);

insert into team
values('host_team','bhopal','ghf','abc',2,'ab');
insert into team
values('guest_team','indore','rty','def',4,'fg');

create table game(
g_date DATE,
g_score int NOT NULL
);
drop table game;
select * from game;
insert into game
values('2019-05-11',2);
insert into game
values('2019-05-11',4);

create table player(
p_name varchar(20),
position varchar(20),
skill_level int NOT NULL,
injury_desc varchar(20)
);
drop table player;
INSERT INTO player
values('ab','left wing',23,'normal');
INSERT INTO player
values('fg','goalie',22,'normal');
select * from player;


Case Study 3:
sol:
create database Uoffice;
use Uoffice;
create table coures(
c_number int NOT NULL,
title varchar(20),
credits int NOT NULL,
syllabus varchar(20),
prerequisities varchar(20));

create table Cofferings(
c_number int NOT NULL,
year int NOT NULL,
semester varchar(20),
s_number int NOT NULL,
instructor varchar(20),
timining varchar(20),
classroom varchar(20));

create table students(
s_id int NOT NULL,
s_name varchar(20),
program varchar(20));

create table instructors(
i_number int NOT NULL,
i_name varchar(20),
dept varchar(20),
title varchar(20));



Case study 4:
create database sports;
use sports;
create table Matches(
m_id int NOT NULL,
m_date DATE,
own_score int NOT NULL,
opp_score int NOT NULL,
opponent varchar(20),
stadium varchar(20));

create table player(
p_name varchar(20),
p_score int NOT NULL,
p_age int NOT NULL);


Case study 5:
create database university;
use university;

create table courses(
name varchar(20),
department_id int not null,
c_number int not null
); 

create table section(
s_number int not null,
enrollment int not null,
courses varchar(20)
); 

create table room(
r_number int not null,
capacity int not null,
building_no int not null
);














What is Continuous Integration?
	
What is Continuous Deployment?
	
Can you describe an example of a CI (and/or CD) process starting the moment a developer submitted a change/PR to a repository?
	
What is Continuous Delivery?
	
What is difference between Continuous Delivery and Continuous Deployment?
	
What CI/CD best practices are you familiar with? Or what do you consider as CI/CD best practice?
	
You are given a pipeline and a pool with 3 workers: virtual machine, baremetal and a container. How will you decide on which one of them to run the pipeline?
	
Where do you store CI/CD pipelines? Why?
	
How do you perform plan capacity for your CI/CD resources? (e.g. servers, storage, etc.)
	
How would you structure/implement CD for an application which depends on several other applications?
	
How do you measure your CI/CD quality? Are there any metrics or KPIs you are using for measuring the quality?
	
What is Jenkins? What have you used it for?

Answers?

1. Continuous Integration (CI) is a software development practice where developers regularly merge their code changes into a central repository, allowing teams to detect and fix errors quickly.

2. Continuous Deployment (CD) is the process of automating the release of software updates into production.

3. An example of a CI/CD process starting the moment a developer submitted a change/PR to a repository would be as follows: The developer would submit the change/PR to the repository, which would trigger a build process on the CI server. The CI server would then run tests against the code and, if successful, deploy the changes to a staging/testing environment. Once the changes have been tested, they can be approved and deployed to production.

4. Continuous Delivery (CD) is an extension of Continuous Integration, where the code is automatically tested and deployed to production. It is focused on ensuring that releases are ready to deploy at any time, allowing teams to respond quickly to customer needs.

5. The difference between Continuous Delivery and Continuous Deployment is that with Continuous Delivery, the code is tested and then released to production when the team is ready, whereas with Continuous Deployment, the code is automatically released to production as soon as it passes the tests.

6. Some best practices for Continuous Integration and Continuous Delivery are automating the build and deployment process, setting up a CI/CD pipeline, using version control systems to manage code, and using automated testing.

7. When deciding which of the three workers to run the pipeline on, consider factors such as cost, security, scalability, and performance. Each worker type has its own advantages and disadvantages, so the best choice for your pipeline will depend on the specific requirements of your project.

8. CI/CD pipelines are typically stored in a version control system such as Git, as this allows teams to track changes over time and collaborate easily.

9. Plan capacity for CI/CD resources can be done by setting up budgeting and monitoring systems to ensure that resources are allocated efficiently. It is also important to ensure that the pipeline is scalable to handle spikes in workloads.

10. When implementing Continuous Delivery for an application that depends on several other applications, you should set up a CI/CD pipeline for each application. The pipelines should be set up to deploy each application in the correct order, and should be tested regularly to ensure that the application is functioning correctly.

11. Measuring CI/CD quality can be done using metrics such as the number of successful builds, the number of errors, the time it takes to deploy, and the number of tests passed.

12. Jenkins is an open-source automation server with a web interface that allows users to configure, manage, and monitor their CI/CD pipelines. It can be used to automate tasks such as building, testing, and deploying code.

13. I have used Jenkins to automate the build, test, and deployment processes for web applications. I have also used it to create pipelines for machine learning models.